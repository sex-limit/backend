model User {
  id        Int        @id @default(autoincrement())
  username  String
  avatar    String
  ipAddress String
  desc      String?
  role      Role       @default(User)
  posts     Post[]
  apple     AppleUser?
  plans     Plan[]
  comments  Comment[]
  replies   Reply[]

  userLikePosts    UserLikePosts[]
  UserLikeComments UserLikeComments[]
  UserLikeReplies  UserLikeReplies[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
  @@index([id, username])
}

model AppleUser {
  id     String @id
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
  @@index([id, userId])
}

model UserLikePosts {
  id String @id @default(uuid())

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
  @@index([postId, userId])
}

model UserLikeComments {
  id String @id @default(uuid())

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
  @@index([commentId, userId])
}

model UserLikeReplies {
  id String @id @default(uuid())

  replyId String
  reply   Reply  @relation(fields: [replyId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
  @@index([replyId, userId])
}
