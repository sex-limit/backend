model Post {
  id        String   @id @default(uuid())
  content   String   @db.Text
  imgs      String[] @default([])
  viewCount Int      @default(0)

  userId Int
  user   User @relation(fields: [userId], references: [id])

  planId String?
  plan   Plan?   @relation(fields: [planId], references: [id])

  planDayCheckedId String?         @unique
  planDayChecked   PlanDayChecked? @relation(fields: [planDayCheckedId], references: [id])

  comments      Comment[]
  userLikePosts UserLikePosts[]

  ranks OfficalRankOnPlan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
  @@index([id, userId, content, planId, planDayCheckedId])
}

model Comment {
  id      String   @id @default(uuid())
  content String   @db.Text
  imgs    String[] @default([])

  userLikeComments UserLikeComments[]
  replies          Reply[]

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, userId, postId])
}

model Reply {
  id      String  @id @default(uuid())
  content String  @db.Text
  imgs    String?

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])

  user   User @relation(fields: [userId], references: [id])
  userId Int

  parentReplyId String?
  parentReply   Reply?  @relation("ReplyAndParent", fields: [parentReplyId], references: [id])
  replies       Reply[] @relation("ReplyAndParent")

  userLikeReplies UserLikeReplies[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, userId, content])
}
